export declare const DropzoneEvents: string[];
export interface DropzoneConfigInterface {
    server?: string;
    params?: string;
    autoReset?: number;
    errorReset?: number;
    cancelReset?: number;
    url?: string;
    method?: string;
    headers?: Object;
    init?: any;
    accept?: any;
    resize?: any;
    fallback?: any;
    renameFilename?: any;
    previewsContainer?: any;
    hiddenInputContainer?: any;
    clickable?: string | string[] | boolean;
    paramName?: string;
    maxFiles?: number;
    maxFilesize?: number;
    filesizeBase?: number;
    acceptedFiles?: string;
    forceFallback?: boolean;
    addRemoveLinks?: boolean;
    uploadMultiple?: boolean;
    parallelUploads?: number;
    thumbnailWidth?: number;
    thumbnailHeight?: number;
    previewTemplate?: string;
    autoProcessQueue?: boolean;
    maxThumbnailFilesize?: number;
    createImageThumbnails?: boolean;
    dictDefaultMessage?: string;
    dictFallbackMessage?: string;
    dictFileTooBig?: string;
    dictResponseError?: string;
    dictInvalidFileType?: string;
    dictRemoveFile?: string;
    dictCancelUpload?: string;
    dictFallbackText?: string;
    dictMaxFilesExceeded?: string;
    dictCancelUploadConfirmation?: string;
}
export declare class DropzoneConfig implements DropzoneConfigInterface {
    server: string;
    params: string;
    autoReset: number;
    errorReset: number;
    cancelReset: number;
    url: string;
    method: string;
    headers: Object;
    init: any;
    accept: any;
    resize: any;
    fallback: any;
    renameFilename: any;
    previewsContainer: any;
    hiddenInputContainer: any;
    clickable: string | string[] | boolean;
    paramName: string;
    maxFiles: number;
    maxFilesize: number;
    filesizeBase: number;
    acceptedFiles: string;
    forceFallback: boolean;
    addRemoveLinks: boolean;
    uploadMultiple: boolean;
    parallelUploads: number;
    thumbnailWidth: number;
    thumbnailHeight: number;
    previewTemplate: string;
    autoProcessQueue: boolean;
    maxThumbnailFilesize: number;
    createImageThumbnails: boolean;
    dictDefaultMessage: string;
    dictFallbackMessage: string;
    dictFileTooBig: string;
    dictResponseError: string;
    dictInvalidFileType: string;
    dictRemoveFile: string;
    dictCancelUpload: string;
    dictFallbackText: string;
    dictMaxFilesExceeded: string;
    dictCancelUploadConfirmation: string;
    constructor(config?: DropzoneConfigInterface);
    assign(config?: DropzoneConfigInterface): void;
}
